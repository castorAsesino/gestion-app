generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Proyecto {
  id                Int                 @id @default(autoincrement())
  nombre            String
  descripcion       String
  presupuesto       Int
  fecha_creacion    DateTime            @default(now())
  evaluacion        Evaluacion[]
  Matriz_Evaluacion Matriz_Evaluacion[]
  procesos          ProyectoProceso[]
}

model Proceso {
  id                Int                 @id @default(autoincrement())
  nombre            String
  descripcion       String
  fecha_creacion    DateTime            @default(now())
  evaluacion        Evaluacion[]
  Matriz_Evaluacion Matriz_Evaluacion[]
  atributos         ProcesoAtributo[]
  proyectos         ProyectoProceso[]
}

model ProyectoProceso {
  id         Int      @id @default(autoincrement())
  proyectoId Int
  procesoId  Int
  proceso    Proceso  @relation(fields: [procesoId], references: [id])
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
}

model Atributo_De_Proceso {
  id             Int               @id @default(autoincrement())
  nombre         String
  descripcion    String
  valor          String
  fecha_creacion DateTime          @default(now())
  atributos      ProcesoAtributo[]
  matrizEvaluacion MatrizEvaluacionAtributo[] // Relación inversa
}

model Evaluacion {
  id             Int      @id @default(autoincrement())
  nombre         String
  descripcion    String
  estado         String
  procesoId      Int
  proyectoId     Int
  fecha_creacion DateTime @default(now())
  proceso        Proceso  @relation(fields: [procesoId], references: [id])
  proyecto       Proyecto @relation(fields: [proyectoId], references: [id])
}

model Escala_Calificacion {
  id             Int      @id @default(autoincrement())
  nombre         String
  descripcion    String
  valor          Int
  fecha_creacion DateTime @default(now())
}

model Niveles {
  id                Int                 @id @default(autoincrement())
  nombre            String
  valorMax          Int
  valorMin          Int
  fecha_creacion    DateTime            @default(now())
  Matriz_Evaluacion Matriz_Evaluacion[]
}

model Matriz_Evaluacion {
  id             Int      @id @default(autoincrement())
  fecha_creacion DateTime @default(now())
  calificacion   Float
  nivelId        Int
  procesoId      Int
  proyectoId     Int
  Niveles        Niveles  @relation(fields: [nivelId], references: [id])
  Proceso        Proceso  @relation(fields: [procesoId], references: [id])
  Proyecto       Proyecto @relation(fields: [proyectoId], references: [id])
  atributos      MatrizEvaluacionAtributo[] // Relación inversa
}

model ProcesoAtributo {
  id                Int                 @id @default(autoincrement())
  procesoId         Int
  atributoProcesoId Int
  atributo          Atributo_De_Proceso @relation(fields: [atributoProcesoId], references: [id])
  proceso           Proceso             @relation(fields: [procesoId], references: [id])
}

// Modelo intermedio para la relación muchos a muchos
model MatrizEvaluacionAtributo {
  id                   Int               @id @default(autoincrement())
  matrizEvaluacionId   Int
  atributoDeProcesoId  Int
  Matriz_Evaluacion    Matriz_Evaluacion @relation(fields: [matrizEvaluacionId], references: [id], onDelete: Cascade)
  Atributo_De_Proceso  Atributo_De_Proceso @relation(fields: [atributoDeProcesoId], references: [id], onDelete: Cascade)

  @@unique([matrizEvaluacionId, atributoDeProcesoId]) // Hace que la combinación de los dos campos sea única
}
